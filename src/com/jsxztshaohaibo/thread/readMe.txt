并发编程中  变量可见性 及 线程安全（变量的原子操作）问题

	1. Java中变量的分类：
		第一种分类：
			全局变量
			局部变量
		
		第二种分类：
			属性(静态、非静态)------ 全局变量
			本地变量------------------ -- 局部变量
			参数------------------------------局部变量
			
		多个线程中共享数据的方法：使用全局变量(静态变量或者共享对象)


	2.变量可见性问题是由于java的内存模型(JMM -java memory model)的规定造成的
		
		JMM规定：
		①、内存分为 主内存 和 工作内存；
		②、共享变量必须存放在主内存中；
		②、线程使用共享变量 只能操作本线程内的变量副本，操作完成再同步到主内存中（先把主内存中的变量，拷贝到本线程工作内存中来）；
		
		主内存      大致对应JVM的内存结构中的   堆内存和方法区
		工作内存 大致对应JVM的内存结构中的   线程栈区
		
		JMM的规定就会带来 线程安全问题：
		
			多个线程同时读取到主内存中的共享变量A=0读到线程的工作内存中， 执行+1操作后，写回主内存 值结果都是 1.
			
		
		
		
	3.线程安全问题(原子操作)
	
	synchronized关键字语义规定：
	
	
	volatile 关键字语义规定：	
		
		
	
	