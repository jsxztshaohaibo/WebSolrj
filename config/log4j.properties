# Output pattern : date [thread] priority category - message   FATAL 0  ERROR 3  WARN 4  INFO 6  DEBUG 7 

#==========================自定义一些参数========================================开始

#统一的日志输出样式
myApp.conversionPattern=%d{yyy-MM-dd HH:mm:ss} %-5p [%t] %c - %m%n

#每天产生的日志文件的存放的根目录
myApp.root = F:/WebSolrJLogs/

#==========================自定义一些参数========================================结束



#=====定义输出级别 (INFO)、信息输出目的地Appender(Console,DailyFile)===============开始

#log4j.rootLogger=INFO,C,DailyFile
log4j.rootLogger=INFO,C

#=====定义输出级别 (INFO)、信息输出目的地Appender(Console,DailyFile)===============结束



##Console
####定义输出目的地
log4j.appender.C=org.apache.log4j.ConsoleAppender

#log4j.appender.C.Threshold=DEBUG 
#log4j.appender.C.Target=System.out 
#log4j.appender.C.encoding=UTF-8

####定义布局 及 输出转换格局
log4j.appender.C.layout=org.apache.log4j.PatternLayout
#log4j.appender.C.layout.ConversionPattern=%d{yyy-MM-dd HH:mm:ss} %-5p [%c{5}] - %m%n
log4j.appender.C.layout.ConversionPattern=${myApp.conversionPattern}

#log4j.rootLogger=DEBUG,Console
#log4j.logger.com.cnblogs.lzrabbit=DEBUG
#log4j.logger.org.springframework=ERROR
#log4j.logger.org.mybatis=ERROR
#log4j.logger.org.apache.ibatis=ERROR
#log4j.logger.org.quartz=ERROR
#log4j.logger.org.apache.axis2=ERROR
#log4j.logger.org.apache.axiom=ERROR
#log4j.logger.org.apache=ERROR
#log4j.logger.httpclient=ERROR

##DailyFile
log4j.appender.DailyFile=org.apache.log4j.DailyRollingFileAppender
log4j.appender.DailyFile.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.DailyFile.File=${myApp.root}daily.log
#log4j.appender.DailyFile.File=F:/WebSolrJ/daily.log
log4j.appender.DailyFile.Append=true
log4j.appender.DailyFile.Threshold=DEBUG
log4j.appender.DailyFile.encoding=UTF-8
log4j.appender.DailyFile.layout=org.apache.log4j.PatternLayout
log4j.appender.DailyFile.layout.ConversionPattern=${ConversionPattern}
log4j.appender.DailyFile.MaxFileSize=2M


#    %c 输出日志信息所属的类的全名 
#    %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy-MM-dd HH:mm:ss}，输出类似：2002-10-18- 22：10：28
#    %f 输出日志信息所属的类的类名 
#    %l 输出日志事件的发生位置，即输出日志信息的语句处于它所在的类的第几行 
#    %m 输出代码中指定的信息，如log(message)中的message 
#    %n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n” 
#    %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL。如果是调用debug()输出的，则为DEBUG，依此类推 
#    %r 输出自应用启动到输出该日志信息所耗费的毫秒数 
#    %t 输出产生该日志事件的线程名